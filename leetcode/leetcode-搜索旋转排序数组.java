/**
 *
    搜索旋转排序数组
	
	link: https://leetcode-cn.com/explore/interview/card/bytedance/243/array-and-sorting/1017/
	
	假设按照升序排序的数组在预先未知的某个点上进行了旋转。

	( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

	搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

	你可以假设数组中不存在重复的元素。

	你的算法时间复杂度必须是 O(log n) 级别。

	示例 1:

	输入: nums = [4,5,6,7,0,1,2], target = 0
	输出: 4
	示例 2:

	输入: nums = [4,5,6,7,0,1,2], target = 3
	输出: -1

 */
class Solution {
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        int mid = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < nums[i - 1]) {
                mid = i;
                break;
            }
            if (nums[i] == target) {
                return i;
            }
        }
        return Math.max(binarySearch(nums, target, 0, mid), binarySearch(nums, target, mid, nums.length));
    }
    
    int binarySearch(int[] nums, int target, int start, int end) {
        int mid;
        while (start < end) {
            mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
        return -1;
    }
}